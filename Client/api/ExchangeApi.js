/**
 * TheCoin Broker
 * TheCoin broker services.  To be implemented allowing exchange of local currency to THESE
 *
 * OpenAPI spec version: 1.0.0
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PurchaseRequestSigned from '../model/PurchaseRequestSigned';
import PurchaseResponseSigned from '../model/PurchaseResponseSigned';
import SellRequestSigned from '../model/SellRequestSigned';
import SellResponseSigned from '../model/SellResponseSigned';

/**
* Exchange service.
* @module api/ExchangeApi
* @version 1.0.0
*/
export default class ExchangeApi {

    /**
    * Constructs a new ExchangeApi. 
    * @alias module:api/ExchangeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Purchase Request
     * User request to purchase THE
     * @param {Number} currencyCode The integer code for the countries currency (ignored for now)
     * @param {module:model/PurchaseRequestSigned} request Purchase Request info
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseResponseSigned} and HTTP response
     */
    purchaseWithHttpInfo(currencyCode, request) {
      let postBody = request;

      // verify the required parameter 'currencyCode' is set
      if (currencyCode === undefined || currencyCode === null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling purchase");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling purchase");
      }


      let pathParams = {
        'currencyCode': currencyCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseResponseSigned;

      return this.apiClient.callApi(
        '/buy/{currencyCode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Purchase Request
     * User request to purchase THE
     * @param {Number} currencyCode The integer code for the countries currency (ignored for now)
     * @param {module:model/PurchaseRequestSigned} request Purchase Request info
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseResponseSigned}
     */
    purchase(currencyCode, request) {
      return this.purchaseWithHttpInfo(currencyCode, request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sell Request
     * User request to sell THE
     * @param {Number} currencyCode The integer code for the countries currency (ignored for now)
     * @param {module:model/SellRequestSigned} request Exchange Request info
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SellResponseSigned} and HTTP response
     */
    sellWithHttpInfo(currencyCode, request) {
      let postBody = request;

      // verify the required parameter 'currencyCode' is set
      if (currencyCode === undefined || currencyCode === null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling sell");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sell");
      }


      let pathParams = {
        'currencyCode': currencyCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellResponseSigned;

      return this.apiClient.callApi(
        '/sell/{currencyCode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sell Request
     * User request to sell THE
     * @param {Number} currencyCode The integer code for the countries currency (ignored for now)
     * @param {module:model/SellRequestSigned} request Exchange Request info
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SellResponseSigned}
     */
    sell(currencyCode, request) {
      return this.sellWithHttpInfo(currencyCode, request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
